"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var assert = require('assert');

var debug = require('debug');

var urllib = require('urllib');

var log = debug('update-reminder');
var BIGBROTHER_HOST = 'https://bigbrother-office.alipay.net';
var BIGFISH_NAME = '@alipay/bigfish'; // new Reminder({ cwd })

module.exports = /*#__PURE__*/function () {
  function Reminder() {
    _classCallCheck(this, Reminder);

    this.cwd = process.env.STATIC_BUILD_SRC || '/home/admin/build'; // STATIC_BUILD_SRC: linke,  /home/admin/build: basement

    log('cwd: ', this.cwd);
  }

  _createClass(Reminder, [{
    key: "report",
    value: function report(name) {
      var _report = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      try {
        if (!_report) {
          return;
        }

        var reportData = this.isBigfishReport(name) ? this.getBigfishReportData() : this.getOtherBuildToolReportData(name);
        log('report data', reportData);

        if (!reportData.needReport || !reportData.data.gitInfo || !reportData.data.gitInfo.repository) {
          log('skip report');
          return;
        }

        urllib.request("".concat(BIGBROTHER_HOST, "/api/lockApps"), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: reportData.data
        }, function (err, data) {
          log('urllib error: ', err);

          if (typeof data === 'string') {
            log('res: ', data.toString());
          }
        });
      } catch (e) {
        log('-------Error--', e);
      }
    }
  }, {
    key: "isBigfishReport",
    value: function isBigfishReport(name) {
      return name === BIGFISH_NAME;
    }
    /**
     * bigfish 上报参数的获取
     *  - 上报时机： lint post install
     *  - 依赖链路为:
     *    update-reminder -> bigfish-eslint -> bigfish
     *  - 若没有 lock 取消上报（lint 依赖 update-reminder 包，需要校验是否有 lock）
     *  - package.json 信息就在 cwd 目录下
     */

  }, {
    key: "getBigfishReportData",
    value: function getBigfishReportData() {
      var pkg = require(path.join(this.cwd, 'package.json'));

      var version = this.getVersion(pkg, BIGFISH_NAME);
      assert(version, 'pack name not installed');
      var isLock = version.indexOf('^') < 0;

      if (!isLock) {
        return {
          needReport: false,
          // 未锁版本，不需要上报
          data: null
        };
      }

      return {
        needReport: true,
        // 有锁版本，进行上报
        data: _objectSpread(_objectSpread({}, this.getCommonReportData()), {}, {
          version: version,
          pkg: pkg
        })
      };
    }
    /**
     * atool-build or roadhog 上报
     *  - 上报时机： build
     *  - 依赖链路为：
     *    update-reminder
     *      -> atool-monitor
     *        -> atool-build -> (app | otherBuildTool)
     *        -> roadhog -> (app | otherBuildTool)
     *        -> 其他各种工具，比如 spm 等
     */

  }, {
    key: "getOtherBuildToolReportData",
    value: function getOtherBuildToolReportData(name) {
      var pkg;
      var version; // 各种工具都会依赖 atool-monitor。只上报项目中有这些依赖的项目（depNeedReport 数据来自于 tnpm ，对 atool-build 和 roadhog 有依赖或者有依赖二次封装的项目都算）

      var depNeedReport = [// atool-build
      'atool-build', '@ali/antd-plus', '@ali/antg-gallery-touchsoul', '@ali/builder-mod', '@ali/chair-atool', '@ali/chair-react', '@ali/fengdie', '@ali/fie-toolkit-nb', '@ali/fie-toolkit-ultro', '@ali/fie-toolkit-whale-comp', '@ali/lzd-toolkit-cube', '@ali/fie-toolkit-nrui', '@ali/fie-toolkit-nbiz', '@ali/mario-atool', '@ali/mario-client', '@ali/mof', '@ali/tap-template-ascm', '@ali/tap-template-ascm-lib', '@ali/tap-template-ascp', '@alife/afw-alert-cli', '@alife/afw-alert-web-simulator', '@alife/luoshu-cli', '@ali/next-bin', '@ali/nuke-bin', '@ali/olympics-local-server', '@alipay/moggles', '@alife/t-common-repository', '@ali/sqi-react', '@ali/santa-component-cli', '@ali/fengdie-mbp', '@alipay/antd-merchant', '@alipay/anylog', '@alipay/emc_user_select', '@alipay/fengdie-cli-mvx', '@alipay/kobe-cli', '@alipay/mentor-bisheng', '@alipay/myreport-antd', '@alipay/opbase-biz-components', '@alipay/report-engine', '@alipay/rule-editor', '@alipay/site', '@alipay/zm-kit', 'antd-tools', 'atool-test', 'fengdie', 'bisheng', 'hermes-treeselect', // roadhog
      'roadhog', '@ali/chiji-common'];

      try {
        pkg = require(path.join(this.cwd, 'package.json'));

        for (var _i = 0, _depNeedReport = depNeedReport; _i < _depNeedReport.length; _i++) {
          var dep = _depNeedReport[_i];
          version = this.getVersion(pkg, dep);

          if (version) {
            break;
          }
        }
      } catch (_) {
        return {
          needReport: false,
          // 未依赖上述包的，不进行上报
          data: null
        };
      }

      return {
        needReport: true,
        // 有依赖上述包的全部进行上报
        data: _objectSpread(_objectSpread({}, this.getCommonReportData()), {}, {
          pkg: pkg,
          version: version
        })
      };
    }
  }, {
    key: "getVersion",
    value: function getVersion(pkg, name) {
      return pkg.dependencies && pkg.dependencies[name] || pkg.devDependencies && pkg.devDependencies[name];
    }
  }, {
    key: "getCommonReportData",
    value: function getCommonReportData() {
      var _process$env = process.env,
          REPO_PROJECT_ID = _process$env.REPO_PROJECT_ID,
          COMMIT_ID = _process$env.COMMIT_ID,
          BRANCH_NAME = _process$env.BRANCH_NAME,
          APP_NAME = _process$env.APP_NAME,
          node = _process$env.node;
      return {
        nodeVersion: node,
        gitInfo: {
          repository: REPO_PROJECT_ID || APP_NAME,
          commitId: COMMIT_ID,
          branch: BRANCH_NAME || COMMIT_ID
        }
      };
    }
  }]);

  return Reminder;
}();