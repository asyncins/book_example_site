'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _util = require('./util');

var _Tween = require('./Tween');

var _Tween2 = _interopRequireDefault(_Tween);

var _ticker = require('./ticker');

var _ticker2 = _interopRequireDefault(_ticker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function noop() {}

var perFrame = Math.round(1000 / 60);
var objectOrArray = _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].array]);

var TweenOne = function (_Component) {
  (0, _inherits3['default'])(TweenOne, _Component);
  (0, _createClass3['default'])(TweenOne, null, [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(props, _ref) {
      var prevProps = _ref.prevProps,
          $self = _ref.$self;

      var nextState = {
        prevProps: props
      };
      if (prevProps && props !== prevProps) {
        if (!$self.tween && !$self.dom) {
          $self.updateAnim = true;
          return nextState;
        }

        // 动画处理
        var newAnimation = props.animation;
        var currentAnimation = prevProps.animation;
        var equal = (0, _util.objectEqual)(currentAnimation, newAnimation);
        if (!equal) {
          if (props.resetStyle && $self.tween) {
            $self.tween.resetDefaultStyle();
          }
          $self.updateAnim = true;
        }

        // 跳帧事件 moment;
        var nextMoment = props.moment;
        if (typeof nextMoment === 'number' && nextMoment !== prevProps.moment) {
          if ($self.tween && !$self.updateAnim) {
            $self.startMoment = nextMoment;
            $self.startTime = _ticker2['default'].time;
            if (props.paused) {
              $self.raf();
            }
            if ($self.tween.progressTime >= $self.tween.totalTime) {
              $self.play();
            }
          } else {
            $self.updateAnim = true;
          }
        }

        // 暂停倒放
        if ($self.paused !== props.paused || $self.reverse !== props.reverse) {
          $self.paused = props.paused;
          $self.reverse = props.reverse;
          if ($self.paused) {
            $self.cancelRequestAnimationFrame();
          } else if ($self.reverse && props.reverseDelay) {
            $self.cancelRequestAnimationFrame();
            _ticker2['default'].timeout($self.restart, props.reverseDelay);
          } else {
            // 在 form 状态下，暂停时拉 moment 时，start 有值恢复播放，在 delay 的时间没有处理。。
            if ($self.tween) {
              $self.tween.resetAnimData();
              $self.tween.resetDefaultStyle();
            }
            if (!$self.updateAnim) {
              $self.restart();
            }
          }
        }

        var styleEqual = (0, _util.objectEqual)(prevProps.style, props.style);
        if (!styleEqual) {
          // 在动画时更改了 style, 作为更改开始数值。
          if ($self.tween) {
            $self.tween.reStart(props.style, prevProps.style, $self.tween.progressTime < $self.tween.totalTime);
            if ($self.paused) {
              $self.raf();
            }
          }
        }
        $self.setForcedJudg(props);
      }
      return nextState; // eslint-disable-line
    }
  }]);

  function TweenOne(props) {
    (0, _classCallCheck3['default'])(this, TweenOne);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (TweenOne.__proto__ || Object.getPrototypeOf(TweenOne)).call(this, props));

    _initialiseProps.call(_this);

    _this.rafID = -1;
    _this.paused = props.paused;
    _this.reverse = props.reverse;
    _this.updateAnim = false;
    _this.repeatNum = 0;
    // 定义 ref 给外部使用；
    _this.currentRef = null;
    _this.forced = {};
    _this.setForcedJudg(props);
    _this.state = {
      $self: _this
    };
    return _this;
  }

  (0, _createClass3['default'])(TweenOne, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.dom = _reactDom2['default'].findDOMNode(this);
      if (this.dom && this.dom.nodeName !== '#text') {
        this.start();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (!this.dom) {
        this.dom = _reactDom2['default'].findDOMNode(this);
      }
      // 样式更新了后再执行动画；
      if (this.updateAnim && this.dom && this.dom.nodeName !== '#text') {
        if (this.tween) {
          this.cancelRequestAnimationFrame();
        }
        this.start();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.cancelRequestAnimationFrame();
    }

    /**
     * @method setForcedJudg
     * @param props
     * QueueAnim 套在组件下面后导至子级变化。
     * <QueueAnim component={Menu} >
     *   <SubMenu key="a" title="导航">
     *     <Item />
     *   </SubMenu>
     * </QueueAnim>
     * rc-Menu 里是以 isXXX 来判断是 rc-Menu 的子级;
     * 如: 用 isSubMenu 来处理 hover 事件
     * 地址: https://github.com/react-component/menu/blob/master/src/MenuMixin.js#L172
     * 暂时方案: 在组件里添加判断用的值。
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          animation = _props.animation,
          component = _props.component,
          componentProps = _props.componentProps,
          reverseDelay = _props.reverseDelay,
          attr = _props.attr,
          paused = _props.paused,
          reverse = _props.reverse,
          repeat = _props.repeat,
          yoyo = _props.yoyo,
          moment = _props.moment,
          resetStyle = _props.resetStyle,
          forcedJudg = _props.forcedJudg,
          props = (0, _objectWithoutProperties3['default'])(_props, ['animation', 'component', 'componentProps', 'reverseDelay', 'attr', 'paused', 'reverse', 'repeat', 'yoyo', 'moment', 'resetStyle', 'forcedJudg']);

      Object.keys(props.style || {}).forEach(function (p) {
        if (p.match(/filter/i)) {
          ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
            props.style[prefix + 'Filter'] = props.style[p];
          });
        }
      });
      var refFunc = function refFunc(c) {
        _this2.currentRef = c;
      };
      // component 为空时调用子级的。。
      var className = props.className,
          children = props.children;

      if (!component && typeof children !== 'string') {
        if (!children) {
          return children;
        }
        var childrenProps = children.props;

        var _ref2 = childrenProps || {},
            childStyle = _ref2.style,
            childClass = _ref2.className;
        // 合并 style 与 className。


        var newStyle = (0, _extends3['default'])({}, childStyle, props.style);
        var newClassName = className ? className + ' ' + childClass : childClass;
        return _react2['default'].cloneElement(children, { style: newStyle, ref: refFunc, className: newClassName });
      }
      return _react2['default'].createElement(component, (0, _extends3['default'])({
        ref: refFunc
      }, props, componentProps));
    }
  }]);
  return TweenOne;
}(_react.Component);

TweenOne.propTypes = {
  component: _propTypes2['default'].any,
  componentProps: _propTypes2['default'].any,
  animation: objectOrArray,
  children: _propTypes2['default'].any,
  style: _propTypes2['default'].object,
  paused: _propTypes2['default'].bool,
  reverse: _propTypes2['default'].bool,
  reverseDelay: _propTypes2['default'].number,
  yoyo: _propTypes2['default'].bool,
  repeat: _propTypes2['default'].number,
  moment: _propTypes2['default'].number,
  attr: _propTypes2['default'].string,
  onChange: _propTypes2['default'].func,
  resetStyle: _propTypes2['default'].bool,
  forcedJudg: _propTypes2['default'].object
};
TweenOne.defaultProps = {
  component: 'div',
  componentProps: {},
  reverseDelay: 0,
  repeat: 0,
  attr: 'style',
  onChange: noop
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.setForcedJudg = function (props) {
    Object.keys(_this3.forced).forEach(function (key) {
      delete _this3[key];
      delete _this3.forced[key];
    });
    if (props.forcedJudg) {
      Object.keys(props.forcedJudg).forEach(function (key) {
        if (!_this3[key]) {
          _this3[key] = props.forcedJudg[key];
          _this3.forced[key] = 1;
        }
      });
    }
  };

  this.setDefault = function (props) {
    _this3.moment = props.moment || 0;
    _this3.startMoment = props.moment || 0;
    _this3.startTime = _ticker2['default'].time;
  };

  this.restart = function () {
    if (!_this3.tween) {
      return;
    }
    _this3.startMoment = _this3.moment;
    _this3.startTime = _ticker2['default'].time;
    _this3.tween.reverse = _this3.reverse;
    _this3.tween.reverseStartTime = _this3.startMoment;
    _this3.raf();
    _this3.play();
  };

  this.start = function () {
    _this3.updateAnim = false;
    var props = _this3.props;
    if (props.animation && Object.keys(props.animation).length) {
      _this3.setDefault(props);
      _this3.tween = new _Tween2['default'](_this3.dom, props.animation, props.attr);
      _this3.tween.reverse = _this3.reverse;
      // 预先注册 raf, 初始动画数值。
      _this3.raf();
      // 开始动画
      _this3.play();
    } else {
      _this3.tween = null;
    }
  };

  this.play = function () {
    _this3.cancelRequestAnimationFrame();
    if (_this3.paused) {
      return;
    }
    _this3.rafID = _ticker2['default'].add(_this3.raf);
  };

  this.frame = function () {
    var yoyo = _this3.props.yoyo;
    var repeat = _this3.props.repeat;

    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this3.tween.totalTime * (repeat + 1);
    repeat = repeat >= 0 ? repeat : Number.MAX_VALUE;
    var moment = _ticker2['default'].time - _this3.startTime + _this3.startMoment;
    if (_this3.reverse) {
      moment = (_this3.startMoment || 0) - (_ticker2['default'].time - _this3.startTime);
    }
    moment = moment > totalTime ? totalTime : moment;
    moment = moment <= 0 ? 0 : moment;
    var repeatNum = Math.floor(moment / _this3.tween.totalTime) || 0;
    repeatNum = repeatNum > repeat ? repeat : repeatNum;
    var tweenMoment = moment - _this3.tween.totalTime * repeatNum;
    tweenMoment = tweenMoment < perFrame && !_this3.reverse && totalTime >= perFrame ? 0 : tweenMoment;
    if (repeat && moment && moment - _this3.tween.totalTime * repeatNum < perFrame) {
      // 在重置样式之前补 complete；
      _this3.tween.frame(_this3.tween.totalTime * repeatNum);
    }
    if (moment < _this3.moment && !_this3.reverse || repeat !== 0 && repeatNum && repeatNum !== _this3.repeatNum) {
      // 在 form 状态下，暂停时拉 moment 时，start 有值，，往返方向播放时，在 delay 的时间没有处理。。
      // 与上面的处理一样，删除 start ，重新走一遍 start。。
      _this3.tween.resetAnimData();
      _this3.tween.resetDefaultStyle();
    }
    var yoyoReverse = yoyo && repeatNum % 2;
    if (yoyoReverse) {
      tweenMoment = _this3.tween.totalTime - tweenMoment;
    }
    _this3.tween.onChange = function (e) {
      var cb = (0, _extends3['default'])({}, e, {
        timelineMode: ''
      });

      if (_this3.moment === _this3.startMoment && !_this3.reverse && !e.index && e.mode === 'onStart' || _this3.reverse) {
        cb.timelineMode = 'onTimelineStart';
      } else if (moment >= totalTime && !_this3.reverse || !moment && _this3.reverse) {
        cb.timelineMode = 'onTimelineComplete';
      } else if (repeatNum !== _this3.timelineRepeatNum) {
        cb.timelineMode = 'onTimelineRepeat';
      } else {
        cb.timelineMode = 'onTimelineUpdate';
      }
      _this3.timelineRepeatNum = repeatNum;
      _this3.props.onChange(cb);
    };
    _this3.moment = moment;
    _this3.repeatNum = repeatNum;
    _this3.tween.frame(tweenMoment);
  };

  this.raf = function () {
    var tween = _this3.tween;
    _this3.frame();
    if (tween !== _this3.tween) {
      // 在 onComplete 时更换动画时，raf 没结束，所以需要强制退出，避逸两个时间的冲突。
      return null;
    }
    var repeat = _this3.props.repeat;

    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this3.tween.totalTime * (repeat + 1);
    if (_this3.moment >= totalTime && !_this3.reverse || _this3.paused || _this3.reverse && _this3.moment === 0) {
      return _this3.cancelRequestAnimationFrame();
    }
    return null;
  };

  this.cancelRequestAnimationFrame = function () {
    _ticker2['default'].clear(_this3.rafID);
    _this3.rafID = -1;
  };
};

TweenOne.isTweenOne = true;
exports['default'] = (0, _reactLifecyclesCompat.polyfill)(TweenOne);
module.exports = exports['default'];